CNN, convolutional neural network   
    model for image processing 
    preprocesses image with conv layers, pooling, etc before flattening into fully connected dense layers

class CNN(nn.Module):
    def __init(self, out_1=2, out_2=1)
        super(CNN, self).__init__()

        self.conv1 = Conv2d(in_channels=1, out_channels=out_1, kernel_size=2, padding=0)
        self.maxpool1 = MaxPool2d(kernel_size=2, stride=1)

        self.conv2 = Conv2d(in_channels=1, out_channels=out_2, kernel_size=2, padding=0)
        self.maxpool2 = MaxPool2d(kernel_size=2, stride=1)

        self.fc1 = nn.Linear(out_2 * 7 * 7, 2) # use formula to calculate resulting shape after convs and maxpools


    def forward(self, x):
        x = self.conv1(x)
        x = torch.relu(x)
        x = self.maxpool1(x)

        x = self.conv2(x)
        x = torch.relu(x)
        x = self.maxpool2(x)

        out.view(x.size(0), -1)

        x = self.fc1(x)
        return x 
    
cnn_model = CNN(2, 2)

#rest of pipeline remains same 